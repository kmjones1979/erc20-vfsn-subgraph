# Subgraph Schema: DAT Token
# Version: 1.0.0

#############################
####### Token Metadata ######
#############################

type Token @entity {
    " Smart contract address of the token "
    id: Bytes!

    " Name of the token, mirrored from the smart contract "
    name: String!

    " Symbol of the token, mirrored from the smart contract "
    symbol: String!

    " The number of decimal places this token uses, default to 18 "
    decimals: Int!

    " Total number of unique token holders who are currently holding more the token "
    currentHolderCount: BigInt!

    " Total number of cumulative unique token holders who held or are holding the token "
    cumulativeHolderCount: BigInt!

    " Total number of token transfer events "
    transferCount: BigInt!

    " Total number of token mint events "
    mintCount: BigInt!

    " Total number of token burn events "
    burnCount: BigInt!

    " Total token supply "
    totalSupply: BigInt!

    " Total token burned "
    totalBurned: BigInt!

    " Total token minted "
    totalMinted: BigInt!

    " List of token transfers "
    transfers: [TransferEvent!]! @derivedFrom(field: "token")

    " Token holder's balance "
    holdersBalance: [AccountBalance!]! @derivedFrom(field: "token")

    ##### Snapshots #####

    " Daily snapshot for this token "
    dailyTokenSnapshot: [TokenDailySnapshot!]! @derivedFrom(field: "token")
}

###############################
####### Token Timeseries ######
###############################

type TokenDailySnapshot @entity {
    " { Token Address }-{ # of days since Unix epoch time } "
    id: Bytes!

    " Token this snapshot is associated with "
    token: Token!

    " Daily total Supply of the token "
    dailyTotalSupply: BigInt!

    " number of accounts holding the token "
    currentHolderCount: BigInt!

    " number of cumulative unique holders "
    cumulativeHolderCount: BigInt!

    " Total number of events occurred in a day "
    dailyEventCount: Int!

    " Total number of transfers in a day "
    dailyTransferCount: Int!

    " Total number of token transfered in a day "
    dailyTransferAmount: BigInt!

    " Total number of mints in a day "
    dailyMintCount: Int!

    " Total number of token minted in a day "
    dailyMintAmount: BigInt!

    " Total number of burns in a day "
    dailyBurnCount: Int!

    " Total number of token burnt in a day "
    dailyBurnAmount: BigInt!

    " Block number of this snapshot "
    blockNumber: BigInt!

    " Timestamp of this snapshot "
    timestamp: BigInt!
}

##################################
##### Event-Level Data #####
##################################

interface Event {
    " { Token ID }-{ Transaction hash }-{ Log index } "
    id: Bytes!

    " Transaction hash of the transaction that emitted this event "
    hash: Bytes!

    " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
    logIndex: Int!

    " The token this event belongs to "
    token: Token!

    " Nonce of the transaction that emitted this event "
    nonce: BigInt!

    " Address that received the tokens "
    to: Account!

    " Address that sent the tokens "
    from: Account!

    " Block number of this event "
    blockNumber: BigInt!

    " Timestamp of this event "
    timestamp: BigInt!
}

type TransferEvent implements Event @entity {
    " { Token ID }-{ Transaction hash }-{ Log index } "
    id: Bytes!

    " Transaction hash of the transaction that emitted this event "
    hash: Bytes!

    " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
    logIndex: Int!

    " The token this event belongs to "
    token: Token!

    " Nonce of the transaction that emitted this event "
    nonce: BigInt!

    " Quantity of tokens transferred "
    amount: BigInt!

    " Account that received the tokens "
    to: Account!

    " Account that sent the tokens "
    from: Account!

    " Block number of this event "
    blockNumber: BigInt!

    " Timestamp of this event "
    timestamp: BigInt!
}

##################################
######## Account MetaData ########
##################################

# An account is a unique Ethereum address
type Account @entity {
    " Address of the account "
    id: Bytes!

    " Token transfers to this account "
    transferTo: [TransferEvent!]! @derivedFrom(field: "to")

    " Token transfers from this account "
    transferFrom: [TransferEvent!]! @derivedFrom(field: "from")

    " Token balances that this account holds "
    balances: [AccountBalance!]! @derivedFrom(field: "account")
}

type AccountBalance @entity {
    " { Address Of the Account }-{ Address of the Token }"
    id: Bytes!

    " Account address "
    account: Account!

    " Token address "
    token: Token!

    " Current account balance "
    amount: BigInt!

    " Block number in which the balance was last modified "
    blockNumber: BigInt!
}

#############################
####### Event Entities ######
#############################

type AddressBlocked @entity(immutable: true) {
    id: Bytes!
    blockedAddress: Bytes! # address
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type AddressUnblocked @entity(immutable: true) {
    id: Bytes!
    unblockedAddress: Bytes! # address
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type AdminChanged @entity(immutable: true) {
    id: Bytes!
    oldAdmin: Bytes! # address
    newAdmin: Bytes! # address
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
    id: Bytes!
    owner: Bytes! # address
    spender: Bytes! # address
    value: BigInt! # uint256
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type DelegateChanged @entity(immutable: true) {
    id: Bytes!
    delegator: Bytes! # address
    fromDelegate: Bytes! # address
    toDelegate: Bytes! # address
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type DelegateVotesChanged @entity(immutable: true) {
    id: Bytes!
    delegate: Bytes! # address
    previousVotes: BigInt! # uint256
    newVotes: BigInt! # uint256
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type EIP712DomainChanged @entity(immutable: true) {
    id: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type MintBlocked @entity(immutable: true) {
    id: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type OwnershipTransferStarted @entity(immutable: true) {
    id: Bytes!
    previousOwner: Bytes! # address
    newOwner: Bytes! # address
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
    id: Bytes!
    previousOwner: Bytes! # address
    newOwner: Bytes! # address
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}
